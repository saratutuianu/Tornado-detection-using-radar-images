"""
DISTRIBUTION STATEMENT A. Approved for public release. Distribution is unlimited.

This material is based upon work supported by the Department of the Air Force under Air Force Contract No. FA8702-15-D-0001. Any opinions, findings, conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the Department of the Air Force.

Â© 2024 Massachusetts Institute of Technology.


The software/firmware is provided to you on an As-Is basis

Delivered to the U.S. Government with Unlimited Rights, as defined in DFARS Part 252.227-7013 or 7014 (Feb 2014). Notwithstanding any copyright notice, U.S. Government rights in this work are defined by DFARS 252.227-7013 or DFARS 252.227-7014 as detailed above. Use of this work other than as specifically authorized by the U.S. Government may violate any copyrights that exist in this work.
"""

"""
Tools for visualizing data
"""

from typing import Dict, List, Any
import matplotlib.pyplot as plt
import numpy as np
import pickle
import pathlib

import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap, LinearSegmentedColormap
from mpl_toolkits.axes_grid1 import make_axes_locatable


def plot_radar(data: Dict[str,Any],
               channels: List[str]=['DBZ','VEL'],
               fig:plt.Figure=None,
                batch_idx:int=0,
                time_idx:int=-1,
                sweep_idx:List=None,
                include_cbar:bool=False,
                include_title:bool=True,
                n_rows:int=None,
                n_cols:int=None):
    """
    Creates a visualization of radar data.

    data is a disctionary generated with one of the data loaders under src/data

    Each channel in data will be a tensor with shape of either [time,height,width,n_sweeps]
    """
    if fig is None:
        fig = plt.figure()
    x=data[channels[0]] # grab sample image
    if len(x.shape)==4: # no batch
        batch_idx=None
    # if sweep index not provided assume lowest sweep
    if sweep_idx is None:
        sweep_idx = len(channels)*[0]
    bidx = lambda a: a[time_idx] if batch_idx is None else a[batch_idx,time_idx]

    event_id = np.int64(bidx(data['event_id']))
    ef_number=np.int64(bidx(data['ef_number']))
    time=np.int64(bidx(data['time']))

    az_min=np.float64(bidx(data['az_lower']))* np.pi/180
    az_max=np.float64(bidx(data['az_upper']))* np.pi/180
    rmin=np.float64(bidx(data['rng_lower']))/1e3
    rmax=np.float64(bidx(data['rng_upper']))/1e3

    na,nr = (x.shape[1],x.shape[2]) if batch_idx is None else (x.shape[2],x.shape[3])
    T=np.linspace(az_min,az_max,na)
    R=np.linspace(rmin,rmax,nr)
    R,T = np.meshgrid(R,T)

    for k,c in enumerate(channels):
        Z=np.float64(bidx(data[c])[...,sweep_idx[k]]) # [H,W]

        if n_rows is None:
            ax=fig.add_subplot(1,len(channels),k+1, polar=True)
        else:
            ax=fig.add_subplot(n_rows,n_cols,k+1, polar=True)
        ax.set_theta_zero_location('N') # radar convention
        ax.set_theta_direction(-1)    
        ax.grid(False)
        cmap,norm = get_cmap(c)
        im=ax.pcolormesh(T,R-rmin,Z,shading='nearest',cmap=cmap,norm=norm)
        
        ax.set_rorigin(-rmin)
        ax.set_thetalim([az_min,az_max])
        rt=np.linspace(0,rmax-rmin,6)
        ax.set_rgrids(rt ,labels=(rt+rmin).astype(np.int64))
        ax.set_xticklabels([]) # turns off ticks
        ax.set_yticklabels([])
        if include_cbar:
            fig.colorbar(im,location='right',shrink=.5,label= get_label(c))
        if include_title:
            ax.set_title(c)


def get_label(c):
    return {
        'DBZ':'dBZ',
        'VEL':'m/s',
        'KDP':'degrees/km',
        'RHOHV':'correlation',
        'WIDTH':'m/s',
        'ZDR':'dB'
    }.get(c,'')



def get_cmap(src):
    import matplotlib as mpl
    from matplotlib.colors import LinearSegmentedColormap
    from matplotlib.colors import ListedColormap
    def make_segcmap(d):
        segs=d['segmentdata']
        vmin=d['vmin']
        vmax=d['vmax']
        cmap=LinearSegmentedColormap('col',segmentdata=segs)   
        cmap.set_under(d['under'])
        cmap.set_over(d['over'])
        cmap.set_bad(d['bad'])
        norm=mpl.colors.Normalize(vmin=vmin, vmax=vmax)
        return cmap,norm
    def make_listed_cmap(d):
        cols=d['colors']
        vals=d['boundaries']
        cmap=ListedColormap(cols)
        if d['under']:
            cmap.set_under(d['under'])
        if d['over']:
            cmap.set_over(d['over'])
        norm = mpl.colors.BoundaryNorm(vals, cmap.N)
        return cmap,norm
    
    thisdir=str(pathlib.Path(__file__).parent.resolve())

    with open(thisdir+'/cmaps.pkl','rb') as f:
        CMAP_DICT=pickle.load(f)
    if 'DBZ' in src or 'refl_' in src:
        cmap,norm=get_refl_cmap()
        return cmap,norm
    elif 'VEL' in src or (src in ['N0U','N1U','N2U','N3U']) or ('vel_' in src):
        from matplotlib import cm
        cmap=mpl.colormaps['seismic']
        cmap.set_under([.9,.9,.9])
        cmap.set_bad([.9,.9,.9])
        cmap.set_over([.9,.9,.9])
        norm=mpl.colors.Normalize(vmin=-60, vmax=60)  # NOTE WE ARE SETTING THE LIMITS HIGH
        return cmap,norm
    elif 'WIDTH' in src:
        cmap,norm=make_segcmap(CMAP_DICT['NWS_SPW'])
        return cmap,norm
    elif 'ZDR' in src:
        cmap,norm=make_segcmap(CMAP_DICT['RefDiff'])
        norm=mpl.colors.Normalize(vmin=-1, vmax=8)
        return cmap,norm
    elif 'phidp_' in src:
        cmap,norm=make_segcmap(CMAP_DICT['Wild25'])
        norm=mpl.colors.Normalize(vmin=-180, vmax=180)
        return cmap,norm
    elif src in ['KDP','N0K','N1K','NAK']:
        cmap,norm=make_segcmap(CMAP_DICT['N0K'])
        norm=mpl.colors.Normalize(vmin=-2, vmax=5)
        return cmap,norm
    elif 'RHOHV' in src:
        cmap,norm=get_cc_cmap()
        return cmap,norm
    elif src=='glm':
        cmap='hot'
        norm=mpl.colors.PowerNorm(gamma=0.5,vmin=0,vmax=100)
        return cmap,norm
    elif src in ['cnn_output']:
        from matplotlib import cm
        cmap=cm.get_cmap('YlOrBr')
        cmap.set_under([.9,.9,.9])
        cmap.set_bad([.9,.9,.9])
        cmap.set_over([.9,.9,.9])
        norm=mpl.colors.Normalize(vmin=0, vmax=1) 
        return cmap,norm
    else:
        return 'jet',None
        

def get_refl_cmap():
    data=np.array([[0.0, 0.42401297155627954, 0.7777777156144231, 1.0],
                    [0.0, 0.4302580258089, 0.7751254196340854, 1.0],
                    [0.0, 0.43650308006152044, 0.7724731236537479, 1.0],
                    [0.0, 0.4427481343141409, 0.7698208276734102, 1.0],
                    [0.0, 0.44899318856676135, 0.7671685316930726, 1.0],
                    [0.0, 0.4552382428193818, 0.764516235712735, 1.0],
                    [0.0, 0.46148329707200225, 0.7618639397323973, 1.0],
                    [0.0, 0.4677283513246227, 0.7592116437520597, 1.0],
                    [0.0, 0.47397340557724316, 0.7565593477717221, 1.0],
                    [0.0, 0.4802184598298636, 0.7539070517913844, 1.0],
                    [0.0, 0.48646351408248406, 0.7512547558110468, 1.0],
                    [0.0, 0.4927085683351045, 0.7486024598307092, 1.0],
                    [0.0, 0.49895362258772497, 0.7459501638503716, 1.0],
                    [0.0, 0.5051986768403455, 0.7432978678700339, 1.0],
                    [0.0, 0.5114437310929659, 0.7406455718896963, 1.0],
                    [0.008611603665235779, 0.5176887853455863, 0.7379932759093587, 1.0],
                    [0.01756049534638135, 0.5239338395982067, 0.735340979929021, 1.0],
                    [0.02650938702752695, 0.5301788938508272, 0.7326886839486835, 1.0],
                    [0.03545827870867252, 0.5364239481034477, 0.7300363879683458, 1.0],
                    [0.04486675820350294, 0.5425691041325799, 0.7266930563960785, 1.0],
                    [0.05440057982933834, 0.5486870151916698, 0.7231612605714668, 1.0],
                    [0.06393440145517373, 0.5548049262507598, 0.7196294647468551, 1.0],
                    [0.07346822308100913, 0.5609228373098498, 0.7160976689222434, 1.0],
                    [0.08300204470684452, 0.5670407483689398, 0.7125658730976318, 1.0],
                    [0.09253586633267992, 0.5731586594280298, 0.70903407727302, 1.0],
                    [0.10206968795851531, 0.5792765704871198, 0.7055022814484083, 1.0],
                    [0.1116035095843507, 0.5853944815462097, 0.7019704856237966, 1.0],
                    [0.1211373312101861, 0.5915123926052996, 0.6984386897991849, 1.0],
                    [0.1306711528360215, 0.5976303036643896, 0.6949068939745732, 1.0],
                    [0.1402049744618569, 0.6037482147234796, 0.6913750981499615, 1.0],
                    [0.1497387960876923, 0.6098661257825696, 0.6878433023253497, 1.0],
                    [0.1592726177135277, 0.6159840368416596, 0.6843115065007381, 1.0],
                    [0.16880643933936307, 0.6221019479007495, 0.6807797106761264, 1.0],
                    [0.17834026096519842, 0.6282198589598395, 0.6772479148515147, 1.0],
                    [0.1878740825910339, 0.6343377700189294, 0.673716119026903, 1.0],
                    [0.19740790421686927, 0.6404556810780194, 0.6701843232022913, 1.0],
                    [0.20694172584270468, 0.6465735921371094, 0.6666525273776795, 1.0],
                    [0.2167660713828592, 0.6525878601910158, 0.6628924062033223, 1.0],
                    [0.22680830985875328, 0.6585243959910345, 0.658961041016656, 1.0],
                    [0.23685054833464728, 0.6644609317910531, 0.6550296758299897, 1.0],
                    [0.24689278681054128, 0.6703974675910719, 0.6510983106433234, 1.0],
                    [0.2569350252864352, 0.6763340033910905, 0.647166945456657, 1.0],
                    [0.2669772637623293, 0.6822705391911092, 0.6432355802699906, 1.0],
                    [0.2770195022382233, 0.6882070749911279, 0.6393042150833244, 1.0],
                    [0.2870617407141173, 0.6941436107911465, 0.635372849896658, 1.0],
                    [0.29710397919001125, 0.7000801465911652, 0.6314414847099916, 1.0],
                    [0.30714621766590533, 0.7060166823911839, 0.6275101195233252, 1.0],
                    [0.31718845614179936, 0.7119532181912026, 0.623578754336659, 1.0],
                    [0.32723069461769333, 0.7178897539912212, 0.6196473891499926, 1.0],
                    [0.3372729330935873, 0.72382628979124, 0.6157160239633264, 1.0],
                    [0.34731517156948133, 0.7297628255912586, 0.61178465877666, 1.0],
                    [0.35735741004537536, 0.7356993613912773, 0.6078532935899936, 1.0],
                    [0.3673996485212694, 0.741635897191296, 0.6039219284033273, 1.0],
                    [0.3774418869971633, 0.7475724329913147, 0.599990563216661, 1.0],
                    [0.38748412547305733, 0.7535089687913333, 0.5960591980299946, 1.0],
                    [0.3976766397196581, 0.7593619944762068, 0.592163688984912, 1.0],
                    [0.4081396503535309, 0.7650647019538187, 0.5883327209946803, 1.0],
                    [0.4186026609874037, 0.7707674094314305, 0.5845017530044485, 1.0],
                    [0.42906567162127657, 0.7764701169090426, 0.5806707850142167, 1.0],
                    [0.43952868225514935, 0.7821728243866544, 0.5768398170239849, 1.0],
                    [0.4499916928890222, 0.7878755318642663, 0.573008849033753, 1.0],
                    [0.4604547035228949, 0.7935782393418782, 0.5691778810435213, 1.0],
                    [0.4709177141567678, 0.7992809468194901, 0.5653469130532895, 1.0],
                    [0.48138072479064065, 0.8049836542971021, 0.5615159450630578, 1.0],
                    [0.49184373542451343, 0.810686361774714, 0.5576849770728259, 1.0],
                    [0.5023067460583863, 0.8163890692523259, 0.5538540090825942, 1.0],
                    [0.512769756692259, 0.8220917767299377, 0.5500230410923624, 1.0],
                    [0.5232327673261319, 0.8277944842075498, 0.5461920731021306, 1.0],
                    [0.5336957779600047, 0.8334971916851616, 0.5423611051118988, 1.0],
                    [0.5441587885938776, 0.8391998991627735, 0.5385301371216671, 1.0],
                    [0.5546217992277503, 0.8449026066403854, 0.5346991691314352, 1.0],
                    [0.5650848098616232, 0.8506053141179973, 0.5308682011412035, 1.0],
                    [0.575547820495496, 0.8563080215956093, 0.5270372331509716, 1.0],
                    [0.5860571046745573, 0.8619706417879891, 0.5232913122207788, 1.0],
                    [0.5968440301247488, 0.8673927382689762, 0.5200556736508194, 1.0],
                    [0.6076309555749407, 0.8728148347499635, 0.5168200350808599, 1.0],
                    [0.6184178810251325, 0.8782369312309507, 0.5135843965109006, 1.0],
                    [0.6292048064753243, 0.8836590277119378, 0.5103487579409411, 1.0],
                    [0.6399917319255161, 0.8890811241929251, 0.5071131193709817, 1.0],
                    [0.6507786573757078, 0.8945032206739123, 0.5038774808010223, 1.0],
                    [0.6615655828258996, 0.8999253171548995, 0.5006418422310629, 1.0],
                    [0.6723525082760914, 0.9053474136358867, 0.4974062036611035, 1.0],
                    [0.683139433726283, 0.9107695101168738, 0.4941705650911441, 1.0],
                    [0.6939263591764749, 0.9161916065978611, 0.49093492652118464, 1.0],
                    [0.7047132846266667, 0.9216137030788483, 0.48769928795122525, 1.0],
                    [0.7155002100768585, 0.9270357995598355, 0.48446364938126585, 1.0],
                    [0.7262871355270503, 0.9324578960408227, 0.4812280108113064, 1.0],
                    [0.737074060977242, 0.93787999252181, 0.477992372241347, 1.0],
                    [0.7478609864274338, 0.9433020890027971, 0.4747567336713876, 1.0],
                    [0.7586479118776256, 0.9487241854837843, 0.47152109510142814, 1.0],
                    [0.7694348373278173, 0.9541462819647715, 0.4682854565314688, 1.0],
                    [0.7802217627780091, 0.9595683784457587, 0.46504981796150935, 1.0],
                    [0.7881541183592317, 0.961636380850762, 0.4597400216788725, 1.0],
                    [0.7958668916428413, 0.9634463760191512, 0.4542706748029528, 1.0],
                    [0.8035796649264508, 0.9652563711875403, 0.4488013279270331, 1.0],
                    [0.8112924382100605, 0.9670663663559294, 0.4433319810511134, 1.0],
                    [0.81900521149367, 0.9688763615243186, 0.43786263417519367, 1.0],
                    [0.8267179847772795, 0.9706863566927076, 0.43239328729927395, 1.0],
                    [0.8344307580608891, 0.9724963518610967, 0.4269239404233543, 1.0],
                    [0.8421435313444987, 0.9743063470294858, 0.42145459354743453, 1.0],
                    [0.8498563046281082, 0.976116342197875, 0.4159852466715148, 1.0],
                    [0.8575690779117179, 0.9779263373662641, 0.4105158997955951, 1.0],
                    [0.8652818511953274, 0.9797363325346532, 0.4050465529196754, 1.0],
                    [0.8729946244789369, 0.9815463277030423, 0.3995772060437557, 1.0],
                    [0.8807073977625466, 0.9833563228714315, 0.39410785916783597, 1.0],
                    [0.8884201710461561, 0.9851663180398206, 0.38863851229191626, 1.0],
                    [0.8961329443297656, 0.9869763132082097, 0.3831691654159966, 1.0],
                    [0.9038457176133753, 0.9887863083765988, 0.37769981854007684, 1.0],
                    [0.9115584908969848, 0.990596303544988, 0.3722304716641571, 1.0],
                    [0.9192712641805945, 0.992406298713377, 0.3667611247882374, 1.0],
                    [0.9206909170748953, 0.9875990473485682, 0.3559708831139085, 1.0],
                    [0.9195933218134726, 0.9801448973704803, 0.34305228352021605, 1.0],
                    [0.91849572655205, 0.9726907473923923, 0.3301336839265236, 1.0],
                    [0.9173981312906274, 0.9652365974143043, 0.31721508433283113, 1.0],
                    [0.9163005360292049, 0.9577824474362165, 0.30429648473913884, 1.0],
                    [0.9152029407677823, 0.9503282974581284, 0.29137788514544616, 1.0],
                    [0.9141053455063597, 0.9428741474800405, 0.2784592855517537, 1.0],
                    [0.9130077502449371, 0.9354199975019526, 0.26554068595806124, 1.0],
                    [0.9119101549835145, 0.9279658475238646, 0.2526220863643688, 1.0],
                    [0.910812559722092, 0.9205116975457767, 0.2397034867706763, 1.0],
                    [0.9097149644606694, 0.9130575475676888, 0.22678488717698383, 1.0],
                    [0.9086173691992467, 0.9056033975896007, 0.21386628758329135, 1.0],
                    [0.9075197739378241, 0.8981492476115129, 0.20094768798959906, 1.0],
                    [0.9064221786764016, 0.8906950976334249, 0.18802908839590643, 1.0],
                    [0.905324583414979, 0.8832409476553369, 0.17511048880221394, 1.0],
                    [0.9042269881535564, 0.875786797677249, 0.16219188920852148, 1.0],
                    [0.9031293928921338, 0.8683326476991611, 0.149273289614829, 1.0],
                    [0.9020317976307112, 0.8608784977210732, 0.13635469002113654, 1.0],
                    [0.9009342023692887, 0.8532485521034334, 0.12434128763278948, 1.0],
                    [0.8998366071078661, 0.845442810846242, 0.1132330824497878, 1.0],
                    [0.8987390118464434, 0.8376370695890504, 0.10212487726678615, 1.0],
                    [0.8976414165850208, 0.8298313283318589, 0.09101667208378447, 1.0],
                    [0.8965438213235983, 0.8220255870746677, 0.07990846690078313, 1.0],
                    [0.8954462260621757, 0.814219845817476, 0.06880026171778116, 1.0],
                    [0.8943486308007531, 0.8064141045602844, 0.05769205653477949, 1.0],
                    [0.8932510355393305, 0.7986083633030929, 0.04658385135177781, 1.0],
                    [0.892153440277908, 0.7908026220459015, 0.03547564616877616, 1.0],
                    [0.8910558450164854, 0.78299688078871, 0.024367440985774494, 1.0],
                    [0.8899582497550628, 0.7751911395315184, 0.013259235802772829, 1.0],
                    [0.8888606544936402, 0.767385398274327, 0.0021510306197711493, 1.0],
                    [0.8877630592322177, 0.7595796570171355, 0.0, 1.0],
                    [0.886665463970795, 0.7517739157599439, 0.0, 1.0],
                    [0.8855678687093724, 0.7439681745027524, 0.0, 1.0],
                    [0.8844702734479499, 0.736162433245561, 0.0, 1.0],
                    [0.8833726781865273, 0.7283566919883695, 0.0, 1.0],
                    [0.8822750829251047, 0.720550950731178, 0.0, 1.0],
                    [0.8811457162115625, 0.7126472163927494, 0.0, 1.0],
                    [0.879936920867721, 0.7044984993512285, 0.0, 1.0],
                    [0.8787281255238797, 0.6963497823097078, 0.0, 1.0],
                    [0.8775193301800382, 0.6882010652681866, 0.0, 1.0],
                    [0.8763105348361968, 0.6800523482266657, 0.0, 1.0],
                    [0.8751017394923554, 0.6719036311851447, 0.0, 1.0],
                    [0.8738929441485139, 0.6637549141436238, 0.0, 1.0],
                    [0.8726841488046726, 0.6556061971021028, 0.0, 1.0],
                    [0.8714753534608312, 0.6474574800605819, 0.0, 1.0],
                    [0.8702665581169897, 0.6393087630190609, 0.0, 1.0],
                    [0.8690577627731483, 0.6311600459775399, 0.0, 1.0],
                    [0.8678489674293068, 0.6230113289360191, 0.0, 1.0],
                    [0.8666401720854655, 0.6148626118944981, 0.0, 1.0],
                    [0.8654313767416241, 0.6067138948529771, 0.0, 1.0],
                    [0.8642225813977826, 0.5985651778114561, 0.0, 1.0],
                    [0.8630137860539412, 0.5904164607699351, 0.0, 1.0],
                    [0.8618049907100999, 0.5822677437284143, 0.0, 1.0],
                    [0.8605961953662584, 0.5741190266868933, 0.0, 1.0],
                    [0.859371688202383, 0.5659477695076686, 0.0, 1.0],
                    [0.8579429273780649, 0.5574834905382899, 0.0, 1.0],
                    [0.8565141665537469, 0.5490192115689116, 0.0, 1.0],
                    [0.8550854057294288, 0.5405549325995335, 0.0, 1.0],
                    [0.8536566449051108, 0.5320906536301552, 0.0, 1.0],
                    [0.8522278840807929, 0.5236263746607769, 0.0, 1.0],
                    [0.8507991232564748, 0.5151620956913986, 0.0, 1.0],
                    [0.8493703624321568, 0.5066978167220203, 0.0, 1.0],
                    [0.8479416016078387, 0.498233537752642, 0.0, 1.0],
                    [0.8465128407835207, 0.4897692587832637, 0.0, 1.0],
                    [0.8450840799592026, 0.4813049798138854, 0.0, 1.0],
                    [0.8436553191348847, 0.47284070084450713, 0.0, 1.0],
                    [0.8422265583105666, 0.46437642187512884, 0.0, 1.0],
                    [0.8407977974862486, 0.45591214290575055, 0.0, 1.0],
                    [0.8393690366619306, 0.44744786393637226, 0.0, 1.0],
                    [0.8379402758376125, 0.43898358496699397, 0.0, 1.0],
                    [0.8365115150132946, 0.43051930599761595, 0.0, 1.0],
                    [0.8350827541889765, 0.42205502702823744, 0.0, 1.0],
                    [0.8336539933646585, 0.4135907480588591, 0.0, 1.0],
                    [0.8319475912692099, 0.4048957611477917, 0.0, 1.0],
                    [0.830194915628573, 0.3961623229131094, 0.0, 1.0],
                    [0.828442239987936, 0.38742888467842707, 0.0, 1.0],
                    [0.826689564347299, 0.37869544644374475, 0.0, 1.0],
                    [0.824936888706662, 0.36996200820906244, 0.0, 1.0],
                    [0.8231842130660251, 0.36122856997438013, 0.0, 1.0],
                    [0.8214315374253881, 0.3524951317396978, 0.0, 1.0],
                    [0.8196788617847511, 0.3437616935050155, 0.0, 1.0],
                    [0.8179261861441142, 0.3350282552703332, 0.0, 1.0],
                    [0.8161735105034771, 0.3262948170356509, 0.0, 1.0],
                    [0.8144208348628401, 0.3175613788009686, 0.0, 1.0],
                    [0.8126681592222031, 0.30882794056628626, 0.0, 1.0],
                    [0.8109154835815662, 0.30009450233160395, 0.0, 1.0],
                    [0.8091628079409293, 0.29136106409692186, 0.0, 1.0],
                    [0.8074101323002922, 0.28262762586223933, 0.0, 1.0],
                    [0.8056574566596553, 0.273894187627557, 0.0, 1.0],
                    [0.8039047810190183, 0.2651607493928747, 0.0, 1.0],
                    [0.8021521053783813, 0.2564273111581924, 0.0, 1.0],
                    [0.8001289333504722, 0.24756234510327274, 0.0, 1.0],
                    [0.7979554855518565, 0.23862430803711013, 0.0, 1.0],
                    [0.7957820377532406, 0.22968627097094751, 0.0, 1.0],
                    [0.7936085899546248, 0.22074823390478487, 0.0, 1.0],
                    [0.791435142156009, 0.21181019683862226, 0.0, 1.0],
                    [0.7892616943573931, 0.20287215977245962, 0.0, 1.0],
                    [0.7870882465587774, 0.193934122706297, 0.0, 1.0],
                    [0.7849147987601616, 0.18499608564013437, 0.0, 1.0],
                    [0.7827413509615457, 0.17605804857397175, 0.0, 1.0],
                    [0.7805679031629299, 0.16712001150780914, 0.0, 1.0],
                    [0.7783944553643142, 0.1581819744416465, 0.0, 1.0],
                    [0.7762210075656983, 0.14924393737548414, 0.0, 1.0],
                    [0.7740475597670825, 0.14030590030932127, 0.0, 1.0],
                    [0.7718741119684667, 0.13136786324315863, 0.0, 1.0],
                    [0.769700664169851, 0.12242982617699602, 0.0, 1.0],
                    [0.7675272163712351, 0.11349178911083341, 0.0, 1.0],
                    [0.7653537685726193, 0.10455375204467077, 0.0, 1.0],
                    [0.7631803207740034, 0.09561571497850815, 0.0, 1.0],
                    [0.7607889800396482, 0.0866246532472459, 0.0, 1.0],
                    [0.7581071153909739, 0.07756289196251745, 0.0, 1.0],
                    [0.7554252507422995, 0.068501130677789, 0.0, 1.0],
                    [0.752743386093625, 0.05943936939306055, 0.0, 1.0],
                    [0.7500615214449506, 0.0503776081083321, 0.0, 1.0],
                    [0.7473796567962763, 0.041315846823603654, 0.0, 1.0],
                    [0.7446977921476018, 0.0322540855388752, 0.0, 1.0],
                    [0.7420159274989274, 0.02319232425414676, 0.0, 1.0],
                    [0.739334062850253, 0.014130562969418309, 0.0, 1.0],
                    [0.7366521982015787, 0.005068801684690122, 0.0, 1.0],
                    [0.7339703335529042, 0.0, 0.0, 1.0],
                    [0.7312884689042298, 0.0, 0.0, 1.0],
                    [0.7286066042555553, 0.0, 0.0, 1.0],
                    [0.725924739606881, 0.0, 0.0, 1.0],
                    [0.7232428749582066, 0.0, 0.0, 1.0],
                    [0.7205610103095321, 0.0, 0.0, 1.0],
                    [0.7178791456608578, 0.0, 0.0, 1.0],
                    [0.7151972810121834, 0.0, 0.0, 1.0],
                    [0.712390074232504, 0.0, 0.0, 1.0],
                    [0.7091232796391398, 0.0, 0.0, 1.0],
                    [0.7058564850457755, 0.0, 0.0, 1.0],
                    [0.7025896904524113, 0.0, 0.0, 1.0],
                    [0.6993228958590471, 0.0, 0.0, 1.0],
                    [0.6960561012656828, 0.0, 0.0, 1.0],
                    [0.6927893066723186, 0.0, 0.0, 1.0],
                    [0.6895225120789544, 0.0, 0.0, 1.0],
                    [0.6862557174855901, 0.0, 0.0, 1.0],
                    [0.6829889228922259, 0.0, 0.0, 1.0],
                    [0.6797221282988617, 0.0, 0.0, 1.0],
                    [0.6764553337054975, 0.0, 0.0, 1.0],
                    [0.6731885391121332, 0.0, 0.0, 1.0],
                    [0.669921744518769, 0.0, 0.0, 1.0],
                    [0.6666549499254047, 0.0, 0.0, 1.0],
                    [0.6633881553320405, 0.0, 0.0, 1.0],
                    [0.6601213607386762, 0.0, 0.0, 1.0],
                    [0.656854566145312, 0.0, 0.0, 1.0]])
    cmap=ListedColormap(data[:,:3])
    norm = mpl.colors.Normalize(vmin=0, vmax=65)
    cmap.set_under([.9,.9,.9])
    cmap.set_over([0,0,0])
    return cmap,norm


def get_cc_cmap():
    data= np.array([0.50,228,223,212,
        0.51,26,0,77,
        0.52,36,3,96,
        0.53,46,5,114,
        0.54,56,8,133,
        0.55,66,10,152,
        0.56,76,13,170,
        0.57,85,17,188,
        0.58,92,34,200,
        0.59,100,50,211,
        0.60,107,66,222,
        0.61,114,83,233,
        0.62,121,99,245,
        0.63,128,115,256,
        0.64,0,102,0,
        0.65,0,119,0,
        0.66,0,135,0,
        0.67,0,152,0,
        0.68,3,168,3,
        0.69,28,177,28,
        0.70,53,185,53,
        0.71,79,194,79,
        0.72,104,203,104,
        0.73,129,212,129,
        0.74,154,221,154,
        0.75,179,230,179,
        0.76,179,179,179,
        0.77,193,193,147,
        0.78,207,207,115,
        0.79,220,220,84,
        0.80,234,234,52,
        0.81,247,247,20,
        0.82,255,249,2,
        0.83,253,230,6,
        0.84,250,212,11,
        0.85,248,193,16,
        0.86,246,175,20,
        0.87,243,156,25,
        0.88,230,145,30,
        0.89,216,135,35,
        0.90,201,126,40,
        0.91,187,116,44,
        0.92,172,106,49,
        0.93,157,96,54,
        0.94,143,87,59,
        0.95,128,77,64,
        0.96,256,77,131,
        0.97,245,68,117,
        0.98,233,60,104,
        0.99,222,51,91,
        1.00,210,43,78,
        1.01,199,34,65,
        1.02,188,26,52,
        1.03,176,17,39,
        1.04,165,9,26,
        1.05,154,0,13])
    data=data.reshape((-1,4))
    cmap=ListedColormap(data[:,1:]/256)
    norm = mpl.colors.BoundaryNorm(data[:,0], cmap.N)
    cmap.set_under([.9,.9,.9])
    cmap.set_over([0,0,0])
    return cmap,norm

